import bisect

class BPlusTreeNode:
    def __init__(self, leaf=False):
        self.leaf = leaf
        self.keys = []
        self.children = []
        self.next = None  # Used for leaf node chaining

class BPlusTree:
    def __init__(self, order):
        self.root = BPlusTreeNode(True)
        self.order = order

    def insert(self, key):
        root = self.root
        if len(root.keys) == self.order - 1:
            new_root = BPlusTreeNode(False)
            new_root.children.append(root)
            self.split_child(new_root, 0)
            self.root = new_root
        self._insert_non_full(self.root, key)

    def _insert_non_full(self, node, key):
        if node.leaf:
            bisect.insort(node.keys, key)
        else:
            idx = bisect.bisect(node.keys, key)
            if len(node.children[idx].keys) == self.order - 1:
                self.split_child(node, idx)
                if key > node.keys[idx]:
                    idx += 1
            self._insert_non_full(node.children[idx], key)

    def split_child(self, parent, index):
        child = parent.children[index]
        mid = len(child.keys) // 2
        new_child = BPlusTreeNode(child.leaf)
        
        parent.keys.insert(index, child.keys[mid])
        parent.children.insert(index + 1, new_child)

        new_child.keys = child.keys[mid + 1:]
        child.keys = child.keys[:mid]
        
        if not child.leaf:
            new_child.children = child.children[mid + 1:]
            child.children = child.children[:mid + 1]
        else:
            new_child.next = child.next
            child.next = new_child

    def search(self, key):
        return self._search(self.root, key)

    def _search(self, node, key):
        if node.leaf:
            return key in node.keys
        idx = bisect.bisect_left(node.keys, key)
        return self._search(node.children[idx], key)

    def print_tree(self, node=None, level=0):
        if node is None:
            node = self.root
        print("Level", level, "Keys:", node.keys)
        if not node.leaf:
            for child in node.children:
                self.print_tree(child, level + 1)

# Example usage
bpt = BPlusTree(order=4)
bpt.insert(10)
bpt.insert(20)
bpt.insert(5)
bpt.insert(6)
bpt.insert(12)
bpt.insert(30)
bpt.insert(7)
bpt.insert(17)

bpt.print_tree()

print("Search 6:", bpt.search(6))
print("Search 15:", bpt.search(15))
